{"ts":1362352618515,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362354382278,"patch":[[{"diffs":[[1,"var HOST = process.env.IP;\nvar PORT = process.env.PORT;\n\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}).listen(PORT);"]],"start1":0,"start2":0,"length1":0,"length2":260}]],"length":260,"saved":false}
{"ts":1362354535360,"patch":[[{"diffs":[[0,"http\");\n"],[1,"var http = require(\"mysql\");"],[0,"\nhttp.cr"]],"start1":77,"start2":77,"length1":16,"length2":44}]],"length":288,"saved":false}
{"ts":1362354553602,"patch":[[{"diffs":[[0,"\");\n"],[-1,"var http = require(\"mysql\");"],[0,"\nhtt"]],"start1":81,"start2":81,"length1":36,"length2":8}]],"length":260,"saved":false}
{"ts":1362355334429,"patch":[[{"diffs":[[0,"ttp\");\n\n"],[1,"// when the daemon started\nvar starttime = (new Date()).getTime();\n\nvar mem = process.memoryUsage();\n// every 10 seconds poll for the memory.\nsetInterval(function() {\n    mem = process.memoryUsage();\n}, 10 * 1000);\n\n"],[0,"http.cre"]],"start1":78,"start2":78,"length1":16,"length2":232}]],"length":476,"saved":false}
{"ts":1362355445432,"patch":[[{"diffs":[[0,");\n\n"],[-1,"http.createServer(function(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello World\");\n  response.end();\n}).listen(PORT"],[1,"var fu = require(\"./fu\"),\n    util = require(\"util\"),\n    url = require(\"url\"),\n    qs = require(\"querystring\");\n\n\nfu.listen(Number(process.env.PORT || PORT), HOST);\n\nfu.get(\"/\", fu.staticHandler(\"index.html\"));\nfu.get(\"/style.css\", fu.staticHandler(\"style.css\"));\nfu.get(\"/client.js\", fu.staticHandler(\"client.js\"));\nfu.get(\"/jquery-1.2.6.min.js\", fu.staticHandler(\"jquery-1.2.6.min.js\"));\n\n\nfu.get(\"/who\", function(req, res) {\n    var nicks = [];\n    for (var id in sessions) {\n        if (!sessions.hasOwnProperty(id)) continue;\n        var session = sessions[id];\n        nicks.push(session.nick);\n    }\n    res.simpleJSON(200, {\n        nicks: nicks,\n        rss: mem.rss\n    });\n});\n\nfu.get(\"/join\", function(req, res) {\n    var nick = qs.parse(url.parse(req.url).query).nick;\n    if (nick === null || nick.length === 0) {\n        res.simpleJSON(400, {\n            error: \"Bad nick.\"\n        });\n        return;\n    }\n    var session = createSession(nick);\n    if (session === null) {\n        res.simpleJSON(400, {\n            error: \"Nick in use\"\n        });\n        return;\n    }\n\n    //util.puts(\"connection: \" + nick + \"@\" + res.connection.remoteAddress);\n    channel.appendMessage(session.nick, \"join\");\n    res.simpleJSON(200, {\n        id: session.id,\n        nick: session.nick,\n        rss: mem.rss,\n        starttime: starttime\n    });\n});\n\nfu.get(\"/part\", function(req, res) {\n    var id = qs.parse(url.parse(req.url).query).id;\n    var session;\n    if (id && sessions[id]) {\n        session = sessions[id];\n        session.destroy();\n    }\n    res.simpleJSON(200, {\n        rss: mem.rss\n    });\n});\n\nfu.get(\"/recv\", function(req, res) {\n    if (!qs.parse(url.parse(req.url).query).since) {\n        res.simpleJSON(400, {\n            error: \"Must supply since parameter\"\n        });\n        return;\n    }\n    var id = qs.parse(url.parse(req.url).query).id;\n    var session;\n    if (id && sessions[id]) {\n        session = sessions[id];\n        session.poke();\n    }\n\n    var since = parseInt(qs.parse(url.parse(req.url).query).since, 10);\n\n    channel.query(since, function(messages) {\n        if (session) session.poke();\n        res.simpleJSON(200, {\n            messages: messages,\n            rss: mem.rss\n        });\n    });\n});\n\nfu.get(\"/send\", function(req, res) {\n    var id = qs.parse(url.parse(req.url).query).id;\n    var text = qs.parse(url.parse(req.url).query).text;\n\n    var session = sessions[id];\n    if (!session || !text) {\n        res.simpleJSON(400, {\n            error: \"No such session id\"\n        });\n        return;\n    }\n\n    session.poke();\n\n    channel.appendMessage(session.nick, \"msg\", text);\n    res.simpleJSON(200, {\n        rss: mem.rss\n    });\n}"],[0,");"]],"start1":298,"start2":298,"length1":178,"length2":2700}]],"length":2998,"saved":false}
{"ts":1362355533941,"patch":[[{"diffs":[[0,"ystring\");\n\n"],[1,"//http.createServer(function(request, response) {\n//  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n//  response.write(\"Hello World\");\n//  response.end();\n//}).listen(PORT);\n"],[0,"\nfu.listen(N"]],"start1":404,"start2":404,"length1":24,"length2":209},{"diffs":[[0,"ex.html\"));\n"],[1,"//"],[0,"fu.get(\"/sty"]],"start1":687,"start2":687,"length1":24,"length2":26},{"diffs":[[0,"yle.css\"));\n"],[1,"//"],[0,"fu.get(\"/cli"]],"start1":742,"start2":742,"length1":24,"length2":26},{"diffs":[[0,".js\"));\n"],[1,"//"],[0,"fu.get(\""]],"start1":801,"start2":801,"length1":16,"length2":18},{"diffs":[[0,") {\n"],[-1,"    var nicks = [];\n    for (var id in sessions) {\n        if (!sessions.hasOwnProperty(id)) continue;\n        var session = sessions[id];\n        nicks.push(session.nick);\n    }\n    res.simpleJSON(200, {\n        nicks: nicks,\n        rss: mem.rss\n    });\n});\n\nfu.get(\"/join\", function(req, res) {\n    var nick = qs.parse(url.parse(req.url).query).nick;\n    if (nick === null || nick.length === 0) {\n        res.simpleJSON(400, {\n            error: \"Bad nick.\"\n        });\n        return;\n    }\n    var session = createSession(nick);\n    if (session === null) {\n        res.simpleJSON(400, {\n            error: \"Nick in use\"\n        });\n        return;\n    }\n\n    //util.puts(\"connection: \" + nick + \"@\" + res.connection.remoteAddress);\n    channel.appendMessage(session.nick, \"join\");\n    res.simpleJSON(200, {\n        id: session.id,\n        nick: session.nick,\n        rss: mem.rss,\n        starttime: starttime\n    });\n});\n\nfu.get(\"/part\", function(req, res) {\n    var id = qs.parse(url.parse(req.url).query).id;\n    var session;\n    if (id && sessions[id]) {\n        session = sessions[id];\n        session.destroy();\n    }\n    res.simpleJSON(200, {\n        rss: mem.rss\n    });\n});\n\nfu.get(\"/recv\", function(req, res) {\n    if (!qs.parse(url.parse(req.url).query).since) {\n        res.simpleJSON(400, {\n            error: \"Must supply since parameter\"\n        });\n        return;\n    }\n    var id = qs.parse(url.parse(req.url).query).id;\n    var session;\n    if (id && sessions[id]) {\n        session = sessions[id];\n        session.poke();\n    }\n\n    var since = parseInt(qs.parse(url.parse(req.url).query).since, 10);\n\n    channel.query(since, function(messages) {\n        if (session) session.poke();\n        res.simpleJSON(200, {\n            messages: messages,\n            rss: mem.rss\n        });\n    });\n});\n\nfu.get(\"/send\", function(req, res) {\n    var id = qs.parse(url.parse(req.url).query).id;\n    var text = qs.parse(url.parse(req.url).query).text;\n\n    var session = sessions[id];\n    if (!session || !text) {\n        res.simpleJSON(400, {\n            error: \"No such session id\"\n        });\n        return;\n    }\n\n    session.poke();\n\n    channel.appendMessage(session.nick, \"msg\", text);\n    res.simpleJSON(200, {\n        rss: mem.rss\n    });\n"],[0,"});"],[1,"\n"]],"start1":918,"start2":918,"length1":2271,"length2":8}]],"length":926,"saved":false}
{"ts":1362355820356,"patch":[[{"diffs":[[0," res) {\n"],[1,"    res.write('sss');\n"],[0,"});\n"]],"start1":914,"start2":914,"length1":12,"length2":34}]],"length":948,"saved":false}
{"ts":1362355848111,"patch":[[{"diffs":[[0,"'sss');\n"],[1,"    res.end()\n"],[0,"});\n"]],"start1":936,"start2":936,"length1":12,"length2":26}]],"length":962,"saved":false}
{"ts":1362355849467,"patch":[[{"diffs":[[0,"es.end()"],[1,";"],[0,"\n});\n"]],"start1":949,"start2":949,"length1":13,"length2":14}]],"length":963,"saved":false}
{"ts":1362355893172,"patch":[[{"diffs":[[0,"req, res) {\n"],[1,"    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n"],[0,"    res.writ"]],"start1":910,"start2":910,"length1":24,"length2":85}]],"length":1024,"saved":false}
{"ts":1362355897527,"patch":[[{"diffs":[[0,"s) {\n    res"],[-1,"ponse"],[0,".writeHead(2"]],"start1":917,"start2":917,"length1":29,"length2":24}]],"length":1019,"saved":false}

{"ts":1362355775219,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362355777880,"patch":[[{"diffs":[[1,"var createServer = require(\"http\").createServer;\nvar readFile = require(\"fs\").readFile;\nvar util = require(\"util\");\nvar url = require(\"url\");\nvar DEBUG = false;\n\nvar fu = exports;\n\nvar NOT_FOUND = \"Not Found\\n\";\n\nfunction notFound(req, res) {\n    res.writeHead(404, {\n        \"Content-Type\": \"text/plain\",\n        \"Content-Length\": NOT_FOUND.length\n    });\n    res.end(NOT_FOUND);\n}\n\nvar getMap = {};\n\nfu.get = function(path, handler) {\n    getMap[path] = handler;\n};\nvar server = createServer(function(req, res) {\n    if (req.method === \"GET\" || req.method === \"HEAD\") {\n        var handler = getMap[url.parse(req.url).pathname] || notFound;\n\n        res.simpleText = function(code, body) {\n            res.writeHead(code, {\n                \"Content-Type\": \"text/plain\",\n                \"Content-Length\": body.length\n            });\n            res.end(body);\n        };\n\n        res.simpleJSON = function(code, obj) {\n            var body = new Buffer(JSON.stringify(obj));\n            res.writeHead(code, {\n                \"Content-Type\": \"text/json\",\n                \"Content-Length\": body.length\n            });\n            res.end(body);\n        };\n\n        handler(req, res);\n    }\n});\n\nfu.listen = function(port, host) {\n    server.listen(port, host);\n};\n\nfu.close = function() {\n    server.close();\n};\n\nfunction extname(path) {\n    var index = path.lastIndexOf(\".\");\n    return index < 0 ? \"\" : path.substring(index);\n}\n\nfu.staticHandler = function(filename) {\n    var body, headers;\n    var content_type = fu.mime.lookupExtension(extname(filename));\n\n    function loadResponseData(callback) {\n        if (body && headers && !DEBUG) {\n            callback();\n            return;\n        }\n\n        util.puts(\"loading \" + filename + \"...\");\n        readFile(filename, function(err, data) {\n            if (err) {\n                util.puts(\"Error loading \" + filename);\n            }\n            else {\n                body = data;\n                headers = {\n                    \"Content-Type\": content_type,\n                    \"Content-Length\": body.length\n                };\n                if (!DEBUG) headers[\"Cache-Control\"] = \"public\";\n                util.puts(\"static file \" + filename + \" loaded\");\n                callback();\n            }\n        });\n    }\n\n    return function(req, res) {\n        loadResponseData(function() {\n            res.writeHead(200, headers);\n            res.end(req.method === \"HEAD\" ? \"\" : body);\n        });\n    }\n};\n\nfu.mime = {\n    // returns MIME type for extension, or fallback, or octet-steam\n    lookupExtension: function(ext, fallback) {\n        return fu.mime.TYPES[ext.toLowerCase()] || fallback || 'application/octet-stream';\n    },\n\n    // List of most common mime-types, stolen from Rack.\n    TYPES: {\n        \".3gp\": \"video/3gpp\",\n        \".a\": \"application/octet-stream\",\n        \".ai\": \"application/postscript\",\n        \".aif\": \"audio/x-aiff\",\n        \".aiff\": \"audio/x-aiff\",\n        \".asc\": \"application/pgp-signature\",\n        \".asf\": \"video/x-ms-asf\",\n        \".asm\": \"text/x-asm\",\n        \".asx\": \"video/x-ms-asf\",\n        \".atom\": \"application/atom+xml\",\n        \".au\": \"audio/basic\",\n        \".avi\": \"video/x-msvideo\",\n        \".bat\": \"application/x-msdownload\",\n        \".bin\": \"application/octet-stream\",\n        \".bmp\": \"image/bmp\",\n        \".bz2\": \"application/x-bzip2\",\n        \".c\": \"text/x-c\",\n        \".cab\": \"application/vnd.ms-cab-compressed\",\n        \".cc\": \"text/x-c\",\n        \".chm\": \"application/vnd.ms-htmlhelp\",\n        \".class\": \"application/octet-stream\",\n        \".com\": \"application/x-msdownload\",\n        \".conf\": \"text/plain\",\n        \".cpp\": \"text/x-c\",\n        \".crt\": \"application/x-x509-ca-cert\",\n        \".css\": \"text/css\",\n        \".csv\": \"text/csv\",\n        \".cxx\": \"text/x-c\",\n        \".deb\": \"application/x-debian-package\",\n        \".der\": \"application/x-x509-ca-cert\",\n        \".diff\": \"text/x-diff\",\n        \".djv\": \"image/vnd.djvu\",\n        \".djvu\": \"image/vnd.djvu\",\n        \".dll\": \"application/x-msdownload\",\n        \".dmg\": \"application/octet-stream\",\n        \".doc\": \"application/msword\",\n        \".dot\": \"application/msword\",\n        \".dtd\": \"application/xml-dtd\",\n        \".dvi\": \"application/x-dvi\",\n        \".ear\": \"application/java-archive\",\n        \".eml\": \"message/rfc822\",\n        \".eps\": \"application/postscript\",\n        \".exe\": \"application/x-msdownload\",\n        \".f\": \"text/x-fortran\",\n        \".f77\": \"text/x-fortran\",\n        \".f90\": \"text/x-fortran\",\n        \".flv\": \"video/x-flv\",\n        \".for\": \"text/x-fortran\",\n        \".gem\": \"application/octet-stream\",\n        \".gemspec\": \"text/x-script.ruby\",\n        \".gif\": \"image/gif\",\n        \".gz\": \"application/x-gzip\",\n        \".h\": \"text/x-c\",\n        \".hh\": \"text/x-c\",\n        \".htm\": \"text/html\",\n        \".html\": \"text/html\",\n        \".ico\": \"image/vnd.microsoft.icon\",\n        \".ics\": \"text/calendar\",\n        \".ifb\": \"text/calendar\",\n        \".iso\": \"application/octet-stream\",\n        \".jar\": \"application/java-archive\",\n        \".java\": \"text/x-java-source\",\n        \".jnlp\": \"application/x-java-jnlp-file\",\n        \".jpeg\": \"image/jpeg\",\n        \".jpg\": \"image/jpeg\",\n        \".js\": \"application/javascript\",\n        \".json\": \"application/json\",\n        \".log\": \"text/plain\",\n        \".m3u\": \"audio/x-mpegurl\",\n        \".m4v\": \"video/mp4\",\n        \".man\": \"text/troff\",\n        \".mathml\": \"application/mathml+xml\",\n        \".mbox\": \"application/mbox\",\n        \".mdoc\": \"text/troff\",\n        \".me\": \"text/troff\",\n        \".mid\": \"audio/midi\",\n        \".midi\": \"audio/midi\",\n        \".mime\": \"message/rfc822\",\n        \".mml\": \"application/mathml+xml\",\n        \".mng\": \"video/x-mng\",\n        \".mov\": \"video/quicktime\",\n        \".mp3\": \"audio/mpeg\",\n        \".mp4\": \"video/mp4\",\n        \".mp4v\": \"video/mp4\",\n        \".mpeg\": \"video/mpeg\",\n        \".mpg\": \"video/mpeg\",\n        \".ms\": \"text/troff\",\n        \".msi\": \"application/x-msdownload\",\n        \".odp\": \"application/vnd.oasis.opendocument.presentation\",\n        \".ods\": \"application/vnd.oasis.opendocument.spreadsheet\",\n        \".odt\": \"application/vnd.oasis.opendocument.text\",\n        \".ogg\": \"application/ogg\",\n        \".p\": \"text/x-pascal\",\n        \".pas\": \"text/x-pascal\",\n        \".pbm\": \"image/x-portable-bitmap\",\n        \".pdf\": \"application/pdf\",\n        \".pem\": \"application/x-x509-ca-cert\",\n        \".pgm\": \"image/x-portable-graymap\",\n        \".pgp\": \"application/pgp-encrypted\",\n        \".pkg\": \"application/octet-stream\",\n        \".pl\": \"text/x-script.perl\",\n        \".pm\": \"text/x-script.perl-module\",\n        \".png\": \"image/png\",\n        \".pnm\": \"image/x-portable-anymap\",\n        \".ppm\": \"image/x-portable-pixmap\",\n        \".pps\": \"application/vnd.ms-powerpoint\",\n        \".ppt\": \"application/vnd.ms-powerpoint\",\n        \".ps\": \"application/postscript\",\n        \".psd\": \"image/vnd.adobe.photoshop\",\n        \".py\": \"text/x-script.python\",\n        \".qt\": \"video/quicktime\",\n        \".ra\": \"audio/x-pn-realaudio\",\n        \".rake\": \"text/x-script.ruby\",\n        \".ram\": \"audio/x-pn-realaudio\",\n        \".rar\": \"application/x-rar-compressed\",\n        \".rb\": \"text/x-script.ruby\",\n        \".rdf\": \"application/rdf+xml\",\n        \".roff\": \"text/troff\",\n        \".rpm\": \"application/x-redhat-package-manager\",\n        \".rss\": \"application/rss+xml\",\n        \".rtf\": \"application/rtf\",\n        \".ru\": \"text/x-script.ruby\",\n        \".s\": \"text/x-asm\",\n        \".sgm\": \"text/sgml\",\n        \".sgml\": \"text/sgml\",\n        \".sh\": \"application/x-sh\",\n        \".sig\": \"application/pgp-signature\",\n        \".snd\": \"audio/basic\",\n        \".so\": \"application/octet-stream\",\n        \".svg\": \"image/svg+xml\",\n        \".svgz\": \"image/svg+xml\",\n        \".swf\": \"application/x-shockwave-flash\",\n        \".t\": \"text/troff\",\n        \".tar\": \"application/x-tar\",\n        \".tbz\": \"application/x-bzip-compressed-tar\",\n        \".tcl\": \"application/x-tcl\",\n        \".tex\": \"application/x-tex\",\n        \".texi\": \"application/x-texinfo\",\n        \".texinfo\": \"application/x-texinfo\",\n        \".text\": \"text/plain\",\n        \".tif\": \"image/tiff\",\n        \".tiff\": \"image/tiff\",\n        \".torrent\": \"application/x-bittorrent\",\n        \".tr\": \"text/troff\",\n        \".txt\": \"text/plain\",\n        \".vcf\": \"text/x-vcard\",\n        \".vcs\": \"text/x-vcalendar\",\n        \".vrml\": \"model/vrml\",\n        \".war\": \"application/java-archive\",\n        \".wav\": \"audio/x-wav\",\n        \".wma\": \"audio/x-ms-wma\",\n        \".wmv\": \"video/x-ms-wmv\",\n        \".wmx\": \"video/x-ms-wmx\",\n        \".wrl\": \"model/vrml\",\n        \".wsdl\": \"application/wsdl+xml\",\n        \".xbm\": \"image/x-xbitmap\",\n        \".xhtml\": \"application/xhtml+xml\",\n        \".xls\": \"application/vnd.ms-excel\",\n        \".xml\": \"application/xml\",\n        \".xpm\": \"image/x-xpixmap\",\n        \".xsl\": \"application/xml\",\n        \".xslt\": \"application/xslt+xml\",\n        \".yaml\": \"text/yaml\",\n        \".yml\": \"text/yaml\",\n        \".zip\": \"application/zip\"\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":8916}]],"length":8916,"saved":false}
